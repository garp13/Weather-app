{"version":3,"sources":["constants/ActionType.js","constants/Key.js","components/Home.js","assets/images/load.gif","components/StartLoading.js","components/WeatherSearch.js","components/SearchLoading.js","components/Tomorrow.js","components/WeatherCard.js","components/IconWeather.js","components/Temperature.js","containers/Weather.jsx","actions/index.js","App.js","reportWebVitals.js","reducers/weathers.js","reducers/index.js","index.js"],"names":["GET_WEATHER","LOADING_WEATHER","SEARCHING_WEATHER","API_KEY","Home","props","renderWeatherTomorrow","renderWeatherCard","renderIconWeather","renderTemperature","cityName","className","span","startLoading","src","loadGif","alt","WeatherSearch","changeCitySearch","type","onKeyUp","e","keyCode","city","document","querySelector","value","searchWeather","id","placeholder","SearchLoading","Tomorrow","time","icon","temp","WeatherCard","humidity","description","useState","today","dayOfWeek","setTime","useEffect","now","Date","String","getDate","padStart","getMonth","getFullYear","getHours","getMinutes","getDay","getTimeNow","IconWeather","iconWeather","Temperature","changeTemp","temperature","temperatureC","temperatureK","onClick","Weather","onCity","onLoading","onSearching","weathers","setCity","callOnCity","useCallback","nowWeather","tomorrow","callOnLoading","loading","a","axios","url","method","data","setTimeout","alert","getWeather","isLoading","StartLoading","isSearch","map","item","index","defaultProps","connect","state","dispatch","ActionTypes","actGetWeather","actLoadingWeather","searching","actSearchingWeather","App","offset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","main","country","vietsubWeather","vietsubCity","getTomorrow","setDate","dd","mm","action","ActionType","console","log","name","weather","Math","round","sys","i","listTomorrow","list","arrTomorrow","dt_txt","substr","push","appReducers","combineReducers","store","createStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e1ad2e3a.chunk.js","sourcesContent":["export const GET_WEATHER = 'GET_WEATHER';\r\nexport const LOADING_WEATHER = 'LOADING_WEATHER';\r\nexport const SEARCHING_WEATHER = 'SEARCHING_WEATHER';","export const API_KEY = \"e9c233593268ff27af3ec1169231598d\";\r\n// http://api.openweathermap.org/data/2.5/weather?q=ho%20chi%20minh&appid=e9c233593268ff27af3ec1169231598d","import { Col, Row } from \"antd\";\r\nimport \"../assets/styles/Home.scss\";\r\n\r\n\r\nconst Home = (props) => {\r\n    const { renderWeatherTomorrow, renderWeatherCard, renderIconWeather, renderTemperature, cityName} = props;\r\n\r\n    return(\r\n        <div>\r\n          \r\n            <div className=\"homePage\">\r\n                <div className=\"cardPage\">\r\n                    <div className=\"cityName\">\r\n                        {cityName}\r\n                        \r\n                    </div>\r\n                </div>\r\n                <Row>\r\n                    <Col span={10}>\r\n                        {renderWeatherCard}\r\n                    </Col>\r\n\r\n                    <Col span={10}>\r\n                        {renderIconWeather}\r\n                    </Col>\r\n\r\n                    <Col span={4}>\r\n                        {renderTemperature}\r\n                    </Col>\r\n                </Row>\r\n                \r\n            \r\n\r\n                <div className=\"tomorrowWeather\">\r\n                    <h3>THỜI TIẾT NGÀY MAI</h3>\r\n                    <Row>\r\n                        {renderWeatherTomorrow}\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","export default __webpack_public_path__ + \"static/media/load.bee065a4.gif\";","import loadGif from \"../assets/images/load.gif\";\r\n\r\n\r\n\r\nconst startLoading = (props) => {\r\n    \r\n    return (\r\n        <div className=\"startLoading\">\r\n            <img src={loadGif} alt=\"Loading\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default startLoading;","\r\n\r\nconst WeatherSearch = (props) => {\r\n    const {changeCitySearch} = props;\r\n    const searchWeather = () => {\r\n        const city = document.querySelector(\"#city\").value;\r\n        changeCitySearch(city);\r\n    }\r\n    \r\n    const enterSearch = (e) => {\r\n        if (e.keyCode === 13){\r\n            searchWeather();\r\n        }\r\n    }\r\n    return(\r\n        <div className=\"search-container\">\r\n                <input type=\"text\" className=\"input-search\" onKeyUp={enterSearch} id=\"city\" placeholder=\"City...\" />\r\n                {/* <button className=\"search-btn\" onClick={() => searchWeather()}><i className=\"fa fa-search\"></i></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherSearch;","import loadGif from \"../assets/images/load.gif\";\r\n\r\nconst SearchLoading = () => {\r\n    return(\r\n        <div className=\"searchContainer\">\r\n            <img src={loadGif} alt=\"Loading\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchLoading","import { Col } from \"antd\";\r\n\r\n\r\n\r\nconst Tomorrow = (props) => {\r\n\r\n    const { time, icon, temp } = props;\r\n    return(\r\n        \r\n            <Col span={6}>\r\n                <div className=\"timeTomorrow\">\r\n                    {time}\r\n                </div>\r\n\r\n                <div className=\"iconTomorrow\">\r\n                    <img src={icon} alt=\"icon tomorrow\" />\r\n                </div>\r\n\r\n                <div className=\"tempTomorrow\">\r\n                    {temp}\r\n                </div>\r\n            </Col>\r\n        \r\n    )\r\n}\r\n\r\nexport default Tomorrow;","import { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nconst WeatherCard = (props) => {\r\n\r\n    const {humidity, description} = props;\r\n    const [time, setTime] = useState({\r\n        time: \"\",\r\n        today: \"\",\r\n        dayOfWeek: \"\",\r\n    });\r\n    \r\n    useEffect(() => {\r\n        const getTimeNow = () => {\r\n            let now = new Date();\r\n            let today = String(now.getDate()).padStart(2, '0') + \"/\" + String((now.getMonth() + 1)).padStart(2, '0') + \"/\" + now.getFullYear();\r\n            let time = now.getHours() + \":\" + String(now.getMinutes()).padStart(2, '0');\r\n            let dayOfWeek = now.getDay();\r\n            let days = [\"Chủ Nhật\", \"Thứ 2\", \"Thứ 3\", \"Thứ 4\", \"Thứ 5\", \"Thứ 6\", \"Thứ 7\"];\r\n    \r\n            setTime({\r\n                time: time,\r\n                today: today,\r\n                dayOfWeek: days[dayOfWeek],\r\n            })\r\n            \r\n        }\r\n        getTimeNow();\r\n        \r\n    }, []);\r\n\r\n    \r\n    return(\r\n        \r\n        <div className=\"weatherCard\">   \r\n            <p className=\"time\"> {time.time} </p>\r\n\r\n            <p className=\"day\"> {time.dayOfWeek} - {time.today} </p>\r\n\r\n            <p className=\"humidity\"> Độ ẩm: {humidity} </p>\r\n                    \r\n            <p className=\"description\"> Thời tiết: {description} </p>                \r\n        </div> \r\n       \r\n        \r\n    )\r\n}\r\n\r\nexport default WeatherCard;","\r\n\r\n\r\nconst IconWeather = (props) => {\r\n\r\n    const {iconWeather} = props;\r\n    return(\r\n        \r\n            <img src={iconWeather} alt=\"weather icon\" className=\"iconWeather\"/>\r\n        \r\n             \r\n        \r\n    )\r\n}\r\n\r\nexport default IconWeather;","\r\n\r\n\r\nconst Temperature = (props) => {\r\n\r\n    const {changeTemp, temperature, temperatureC, temperatureK} = props;\r\n    return(\r\n        \r\n        <div className=\"temperature\">\r\n            <h3>{temperature ? temperatureC : temperatureK}</h3>\r\n            <p>\r\n                \r\n                <span\r\n                    onClick={() => {\r\n                        changeTemp(true);\r\n                    }}\r\n                    className={temperature ? \"temperature-active\" : \"temperature-not-active\" }\r\n                >\r\n                    °C\r\n                </span>/<span\r\n                            onClick={() => {\r\n                                changeTemp(false)\r\n                            }}\r\n                            className={!temperature ? \"temperature-active\" : \"temperature-not-active\" }\r\n                        > \r\n                            °F\r\n                        </span>\r\n            </p>\r\n        </div>\r\n       \r\n        \r\n    )\r\n}\r\n\r\nexport default Temperature;","import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { actGetWeather, actLoadingWeather, actSearchingWeather } from '../actions';\r\nimport { API_KEY } from '../constants/Key';\r\nimport axios from 'axios';\r\nimport Home from '../components/Home';\r\nimport StartLoading from '../components/StartLoading';\r\nimport WeatherSearch from '../components/WeatherSearch';\r\nimport SearchLoading from '../components/SearchLoading';\r\nimport Tomorrow from '../components/Tomorrow';\r\nimport WeatherCard from '../components/WeatherCard';\r\nimport IconWeather from '../components/IconWeather';\r\n\r\nimport Temperature from '../components/Temperature';\r\n\r\nWeather.propTypes = {\r\n    weathers: PropTypes.object.isRequired,\r\n    onCity: PropTypes.func.isRequired,\r\n    onLoading: PropTypes.func.isRequired,\r\n    onSearching: PropTypes.func.isRequired,\r\n};\r\n\r\nWeather.defaultProps = {\r\n    \r\n}\r\nfunction Weather(props) {\r\n\r\n    const { onCity, onLoading, onSearching, weathers } = props;\r\n    const [city, setCity] = useState({\r\n                                        cityName:\"Ho Chi Minh\",\r\n                                        temperature: true,\r\n                                    });\r\n                                    \r\n\r\n    const changeCitySearch = (cityName) => {\r\n        setCity({\r\n            ...city,\r\n            cityName: cityName,\r\n        });\r\n\r\n        onSearching(true);\r\n        setTimeout(() => {\r\n            onSearching(false);\r\n        }, 1500);\r\n      \r\n    }\r\n\r\n    const changeTemp = (temp) => {\r\n        setCity({\r\n            ...city,\r\n            temperature: temp,\r\n        });\r\n        \r\n    }\r\n\r\n    const callOnCity = useCallback((nowWeather, tomorrow) => {\r\n        onCity(nowWeather,tomorrow);\r\n    },[onCity]);\r\n\r\n    const callOnLoading = useCallback((loading) => {\r\n        onLoading(loading);\r\n    },[onLoading]);\r\n\r\n\r\n    useEffect(() => {\r\n        const getWeather = async (cityName) => {\r\n\r\n\r\n            try {\r\n                const nowWeather = await axios({\r\n                    url: `http://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}`,\r\n                    method: 'GET'\r\n                });\r\n                const tomorrow = await axios({\r\n                    url: `http://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${API_KEY}`,\r\n                    method: 'GET'\r\n                });\r\n\r\n                callOnCity(nowWeather.data,tomorrow.data);\r\n                \r\n                setTimeout(() => {\r\n                    callOnLoading(false);\r\n                }, 1500);\r\n                \r\n            } catch (error) {\r\n                alert(\"Không tìm thấy địa điểm này\");\r\n            }\r\n            \r\n        }\r\n\r\n\r\n        getWeather(city.cityName);\r\n        \r\n    }, [city, callOnCity, callOnLoading]);\r\n\r\n    const renderWeatherTomorrow = (weathers) => {\r\n        return  weathers.tomorrow.map ( (item, index) =>{\r\n                    return <Tomorrow \r\n                                time={item.time}\r\n                                icon={item.icon}\r\n                                temp={item.temperatureC}\r\n                                key={index}\r\n                            />\r\n                })\r\n               \r\n        \r\n    };\r\n\r\n    const renderWeatherCard = (weathers) => {\r\n        return <WeatherCard \r\n                    humidity = {weathers.humidity}\r\n                    description = {weathers.description}\r\n                />\r\n    }\r\n\r\n    const renderIconWeather = (weathers) => {\r\n        return <IconWeather \r\n                    iconWeather = {weathers.icon}\r\n                />\r\n    }\r\n\r\n    const renderTemperature = (weathers) => {\r\n        return <Temperature\r\n                    changeTemp = {changeTemp}\r\n                    temperature = {city.temperature}\r\n                    temperatureC = {weathers.temperatureC}\r\n                    temperatureK = {weathers.temperatureK}\r\n                />\r\n    }\r\n\r\n    return (\r\n       <div>\r\n            {weathers.isLoading && <StartLoading />}\r\n            {weathers.isSearch && <SearchLoading />}\r\n            <WeatherSearch \r\n                changeCitySearch = { changeCitySearch }\r\n            />\r\n\r\n            <Home \r\n                cityName = {weathers.city}\r\n                renderWeatherCard= {renderWeatherCard(weathers)}\r\n                renderIconWeather= {renderIconWeather(weathers)}\r\n                renderWeatherTomorrow= {renderWeatherTomorrow(weathers)}\r\n                renderTemperature = {renderTemperature(weathers)}\r\n            />\r\n       </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return{\r\n        onCity: (nowWeather,tomorrow) => {\r\n            dispatch(actGetWeather(nowWeather,tomorrow));\r\n        },\r\n        onLoading:(loading) => {\r\n            dispatch(actLoadingWeather(loading));\r\n        },\r\n        onSearching:(searching) => {\r\n            dispatch(actSearchingWeather(searching));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        weathers: state.weathers,\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);","import * as ActionTypes from \"../constants/ActionType\";\r\n\r\nexport const actGetWeather = (nowWeather,tomorrow) => {\r\n    return{\r\n        type: ActionTypes.GET_WEATHER,\r\n        nowWeather,\r\n        tomorrow\r\n        \r\n        // country\r\n    }\r\n}\r\n\r\nexport const actLoadingWeather = (loading) => {\r\n    return{\r\n        type: ActionTypes.LOADING_WEATHER,\r\n        loading\r\n        // country\r\n    }\r\n}\r\n\r\nexport const actSearchingWeather = (searching) => {\r\n    return{\r\n        type: ActionTypes.SEARCHING_WEATHER,\r\n        searching\r\n        // country\r\n    }\r\n}\r\n","\nimport { Col, Row } from 'antd';\nimport './App.scss';\n\nimport Weather from './containers/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Row>\n\n        <Col span={16} offset={4}>\n          <Weather />\n       </Col>\n      </Row> \n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nimport * as ActionType from \"../constants/ActionType\";\r\n\r\nvar initialState = {\r\n    isLoading: true,\r\n    isSearch: false,\r\n    icon: \"\",\r\n    main:'',\r\n    // temperature: true,\r\n    temperatureC: '',\r\n    temperatureK:'',\r\n    city: \"Ho Chi Minh\",\r\n    country: \"VN\",\r\n    humidity: '',\r\n    description: '',\r\n    // error: '',\r\n    tomorrow:[\r\n        {\r\n            time:'',\r\n            temperatureC:'',\r\n            icon:'',\r\n        }\r\n    ]\r\n};\r\n\r\nconst vietsubWeather = [\r\n    ['thunderstorm with light rain', 'Giông bão có mưa nhẹ'],\r\n    ['thunderstorm with rain', 'Giông bão có mưa'],\r\n    ['thunderstorm with heavy rain', 'Giông bão có mưa lớn'],\r\n    ['light thunderstorm', 'Giông bão nhẹ'],\r\n    ['thunderstorm', 'Giông'],\r\n    ['heavy thunderstorm', 'Giông bão lớn'],\r\n    ['ragged thunderstorm', 'Giông bão'],\r\n    ['thunderstorm with light drizzle', 'Giông bão có mưa phùn nhẹ'],\r\n    ['thunderstorm with drizzle', 'Giông bão có mưa phùn'],\r\n    ['thunderstorm with heavy drizzle', 'Giông bão có mưa phùn lớn'],\r\n    ['light intensity drizzle', 'Cường độ nhẹ mưa phùn'],\r\n    ['drizzle', 'Mưa phùn'],\r\n    ['heavy intensity drizzle', 'Cường độ nặng mưa phùn'],\r\n    ['light intensity drizzle rain', 'Cường độ nhẹ mưa phùn'],\r\n    ['drizzle rain', 'Mưa phùn'],\r\n    ['heavy intensity drizzle rain', 'Mưa phùn cường độ lớn'],\r\n    ['shower rain and drizzle', 'Mưa rào và mưa phùn'],\r\n    ['heavy shower rain and drizzle', 'Mưa rào và mưa phùn'],\r\n    ['shower drizzle', 'Mưa phùn tắm'],\r\n    ['light rain', 'Mưa nhỏ'],\r\n    ['moderate rain', 'Mưa vừa'],\r\n    ['heavy intensity rain', 'Mưa lớn'],\r\n    ['very heavy rain', 'Mưa rất lớn'],\r\n    ['extreme rain', 'Mưa cực lớn'],\r\n    ['freezing rain', 'Mưa lạnh'],\r\n    ['light intensity shower rain', 'Cường độ nhẹ mưa rào'],\r\n    ['shower rain', 'Mưa'],\r\n    ['heavy intensity shower rain', 'Mưa rào cường độ lớn'],\r\n    ['ragged shower rain', 'Mưa rào'],\r\n    ['light snow', 'Tuyết nhẹ'],\r\n    ['Snow', 'Tuyết'],\r\n    ['Heavy snow', 'Tuyết rơi nhiều'],\r\n    ['Sleet', 'Tuyết'],\r\n    ['Light shower sleet', 'Mưa rào nhẹ'],\r\n    ['Shower sleet', 'Mưa rào'],\r\n    ['Light rain and snow', 'Mưa nhẹ và tuyết'],\r\n    ['Rain and snow', 'Mưa và tuyết'],\r\n    ['Light shower snow', 'Mưa tuyết nhẹ'],\r\n    ['Shower snow', 'Tuyết'],\r\n    ['Heavy shower snow', 'Mưa tuyết lớn'],\r\n    ['mist', 'Sương mù'],\r\n    ['Smoke', 'Khói'],\r\n    ['Haze', 'Sương mù'],\r\n    ['sand/ dust whirls', 'Bụi xoáy'],\r\n    ['fog', 'Sương mù'],\r\n    ['sand', 'Cát'],\r\n    ['dust', 'Bụi băm'],\r\n    ['volcanic ash', 'Tro núi lửa'],\r\n    ['squalls', 'mưa đá'],\r\n    ['tornado', 'Lốc xoáy'],\r\n    ['clear sky', 'Bầu trời quang đãng'],\r\n    ['few clouds', 'Ít mây'],\r\n    ['scattered clouds', 'Mây rải rác'],\r\n    ['broken clouds', 'Mây tan'],\r\n    ['overcast clouds', 'Mây u ám']\r\n]\r\n\r\nconst vietsubCity = [\r\n    [\"Ho Chi Minh City\", \"Hồ Chí Minh\"],\r\n    [\"Turan\",\"Đà Nẵng\"],\r\n    [\"Hanoi\",\"Hà Nội\"],\r\n    [\"Hue\", \"Huế\"],\r\n]\r\n\r\nconst getTomorrow = () => {\r\n    let today = new Date();\r\n    today.setDate(new Date().getDate() + 1);\r\n    let dd = String(today.getDate()).padStart(2, '0');\r\n    let mm = String(today.getMonth() + 1).padStart(2, '0');\r\n    let yyyy = String(today.getFullYear());\r\n    return yyyy + '-' + mm + '-' + dd;\r\n}\r\nconst weathers = (state = initialState, action) => {\r\n    \r\n    switch(action.type){\r\n        case ActionType.GET_WEATHER:{\r\n            console.log(\"GET_WEATHER\");\r\n            state = {\r\n                ...state,\r\n                city: action.nowWeather.name,\r\n                icon: \"http://openweathermap.org/img/wn/\" + action.nowWeather.weather[0].icon + \"@4x.png\",\r\n                description: action.nowWeather.weather[0].description,\r\n                temperatureC: Math.round(action.nowWeather.main.temp-273.15) + \"°C\",\r\n                temperatureK: Math.round(action.nowWeather.main.temp*9/5-459.57) + \"°F\",\r\n                main: action.nowWeather.weather[0].main,\r\n                humidity: action.nowWeather.main.humidity,\r\n                country: action.nowWeather.sys.country,\r\n            }\r\n            //description -> Vietnamese\r\n            for (let i of vietsubWeather){\r\n                if(i[0] === state.description){\r\n                    state = {\r\n                        ...state,\r\n                        description: i[1]\r\n                    }\r\n                }\r\n            }\r\n            // city -> Vietnamese\r\n            for (let i of vietsubCity){\r\n                if(i[0] === state.city){\r\n                    state = {\r\n                        ...state,\r\n                        city: i[1]\r\n                    }\r\n                }\r\n            }\r\n            const listTomorrow = action.tomorrow.list;\r\n            const tomorrow = getTomorrow();\r\n            let arrTomorrow = [];\r\n            for (let i of listTomorrow){\r\n                if((i.dt_txt === tomorrow + \" 00:00:00\") || (i.dt_txt === tomorrow + \" 06:00:00\") || (i.dt_txt === tomorrow + \" 12:00:00\") || (i.dt_txt === tomorrow + \" 18:00:00\")) {\r\n                    let data = {\r\n                        time: i.dt_txt.substr(11, 5),\r\n                        temperatureC: Math.round(i.main.temp - 273.15) + \"°C\",\r\n                        icon: \"http://openweathermap.org/img/wn/\" + i.weather[0].icon + \"@2x.png\"\r\n                    }\r\n                    \r\n                    arrTomorrow.push(data);\r\n                }\r\n            }\r\n            state = {\r\n                ...state,\r\n                tomorrow: arrTomorrow,\r\n            }\r\n\r\n            \r\n            return {...state};\r\n        }\r\n\r\n        case ActionType.LOADING_WEATHER:{\r\n            console.log(\"LOADING_WEATHER\");\r\n            state = {\r\n                ...state,\r\n                isLoading: action.loading,\r\n            }\r\n            return {...state};\r\n        }\r\n\r\n        case ActionType.SEARCHING_WEATHER:{\r\n            console.log(\"SEARCHING_WEATHER\");\r\n            state = {\r\n                ...state,\r\n                isSearch: action.searching,\r\n            }\r\n            return {...state};\r\n        }\r\n            \r\n        default: {\r\n            return {...state};\r\n        }\r\n            \r\n    }\r\n    \r\n};\r\n\r\n\r\n\r\n\r\nexport default weathers;","import weathers from \"./weathers\";\r\nimport { combineReducers } from 'redux';\r\n\r\n\r\nconst appReducers =  combineReducers({\r\n    weathers\r\n});\r\n\r\nexport default appReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport appReducers from './reducers';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n  appReducers\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}